---
title: "第19期  苹果换新一次成功的大迁徙"
editor: visual
---

每年的五月到六月，在一望无际的非洲大草原上，数百万只食草动物为了生存，跟随着雨水和青草往返跋涉6000多公里。从坦桑尼亚的塞伦盖蒂大草原，一直跋涉到肯尼亚的马赛马拉大草原，途中要躲过狮子的追捕，要躲过鳄鱼的伏击。每年这漫长的迁徙中，伴随着这些食草动物的是饥饿、惊吓，甚至是死亡。每年30%的动物能侥幸回到出发的地点，70%的动物在跋涉中丢掉了自己的性命。这是大自然的死亡之旅，同时也是新生之旅。在这次迁徙中，有超过40万鲜活的生命诞生，出生和死亡如影随形。

在科技的历史上，也有无数的迁徙。有无数的失败者，踏着死亡的尸骨艰难跋涉，共同创造了我们现在这个繁荣的科技时代。迁徙的失败者，如Palm，如Compaq，如诺基亚，留给我们的是回忆和遗产。物竞天择，适者生存。迁徙成功者带给我们的是科技的繁荣时光。

回到2005年的6月6日，刚刚接受完手术、略显憔悴的乔布斯心高气满地登上了WWDC的舞台，用他一贯平静且具煽动性的语调，告诉台下的观众：苹果公司将决定把整条的Mac产品线从Power PC芯片迁移到英特尔芯片。台下的观众一如既往地掌声雷动。为什么换一个CPU就让台下的观众如此疯狂呢？这个要从最开始的地方说起。

在1965年，有一个叫摩尔的化学博士，随便发了一篇文章。这篇文章没有实验、没有论证、没有公式，只有预测。他预测，在至多十年内，集成电路的集成度会两年翻一番，后来修正为每18个月翻一番。虽然这个预测当时令人难以置信，但是几十年下来，IT行业竟然始终遵循着摩尔定律预测的速度发展。这个化学博士随后创立了英特尔公司，一个叱咤风云五十年的公司就这样诞生了。

英特尔刚刚诞生的时候，作为一个新公司，远没有现在这么呼风唤雨。英特尔大多时候都是卖内存的，偶尔造一下CPU。相比于CPU，内存是一种低技术含量的东西，但是这并不妨碍英特尔对外宣称自己是CPU厂商。一家伟大的公司，就像草原上幸存的角马一样，需要的可不仅仅是实力，还需要非常好的运气。

在1981年，IBM开发出了第一台个人电脑，一下子捧红了两个合作伙伴，一个是微软，另一个是英特尔。当时IBM并没有太看重个人电脑这个小玩意儿，随手就把CPU设计的任务交给了英特尔。当时英特尔举全公司之力，不惜关掉自己的内存部门，全力设计8086这款CPU。这款CPU以及后面的几款奠定了目前市场上主流的框架之一——x86框架。

在写这篇稿子的时候，我前思后想，因为这是我自己的公众号，对阅读量和转发量实际上没有太高的要求。虽然是越多越好，但是少一点或者多一点，对我也不会产生什么实际的影响。所以决定破例大谈一下技术，即使可能会有人决定取消关注。因为CPU架构这个知识太重要了，尤其是关注我微信公众号的程序员们，一定要知道CPU架构是怎么回事。如果作为一个程序员，你都不知道CPU架构，那么你和项目经理还有什么区别呢？

远在英特尔成立的十几年前，CPU的理论就已经开始发展并且完善，市场上也出现了各种各样的CPU。但是，随着理论研究的深入，CPU也就越复杂，也越来越难以制造。市场的需求是CPU越快越好，这个是毫无疑问的。CPU的快慢主要取决于两个方面：一个是CPU硬件本身够不够快，另一个取决于编译器本身够不够快。如果CPU硬件本身够快，但是编译器非常烂，相当于法拉利开上了泥巴路，有劲也使不出来。不幸的是，当时正好是这种情况，编译器生成的机器码非常不好，执行的效率远没有人工写的机器码高。

事物的两面性在于，手工写机器码快是快，但是太难了也太繁琐了。这就是一个非常大的矛盾，用我们政治书上的话来说，就是人民群众日益增长的物质文化需求同落后的编译器之间的矛盾。有了困难就得想办法解决，那怎么办呢？当时就想出了一个方法，是在CPU硬件里加入更高级的指令，让一条高级指令相当于几条低级的指令。写一条高级的指令，就相当于执行了十几条低级的指令。这样在手写机器码的时候，总是会方便一些。人民群众的智慧是无穷的，这种方法相当于毛主席讲一句话，顶一万句；高级指令的一句话，顶低级指令的十句。

有了指导思想，这些CPU的设计厂商把芯片的逻辑设计得越来越复杂，硬件上复杂了，支持了高级指令，手写指令的痛苦也就相应的减小了。所以这最终还是个取舍的问题：硬件上复杂了，软件上就会轻松；软件上复杂了，硬件上就会轻松。有没有让软件和硬件同时轻松的方法呢？很抱歉，一直都没有。

当时不少CPU厂商都卯足了劲，不撞南墙不回头，死磕硬件的逻辑电路，怎么复杂怎么来，尽量让软件简单，让程序员手写机器码的时候难度能够降低。但是此一时彼一时，三十年河东三十年河西。到了20世纪70年代，计算机行业有了长足的进步，内存变大了也便宜了。更重要的是，编译理论取得了突破。编译器编译出来的代码和人工手写的代码之间性能已经在伯仲之间。越来越多的人意识到，以后不可能再让人手写机器码。比如说我想，包括我在内的听众，应该没有人可以手写机器码来编程，都是使用编程语言，然后让编译器生成机器码，根本不用再手写机器码。

虽然编译器这么厉害，不用手写机器码了，但是软件方面的压力已经减小了，那是不是也应该把硬件方面的压力能够减小一些呢？比如说以前的CPU厂家设计那么多的复杂逻辑电路，是不是也应该放弃了呢？基于这种思路，精简指令集的理论也就提出来了，学名叫RISC（精简指令集）。原来那种有复杂逻辑电路的CPU叫做CISC（复杂指令集）。当然，按照人类的一贯秉性，这两派肯定是互相不服的。既然谈不拢，就在市场上见喽！

英特尔公司当时已经造出了x86的CPU，用的是复杂指令集的。当时还是纸上谈兵，英特尔肯定是坚守复杂指令集的。当时英特尔作为复杂指令集的盟主，拉拢的对象是大批个人电脑厂商。基本上我们只要不买苹果电脑，肯定是用的复杂指令集的CPU。而当时包括Sun的Sparc架构以及IBM的Power架构，也就是精简指令集的阵营，拉拢的对象是个人电脑厂商苹果公司。这两派阵营打得也是难分难解、明争暗斗，大批的厂商还来凑热闹。包括微软公司的Windows NT 3.51操作系统、Solaris的操作系统、IBM的AIX操作系统，都是可以运行在Power PC上的。而且那个时候也流行跑分，这些精简指令集的CPU超过了英特尔的复杂指令集的CPU，技术很高。但是普通的老百姓根本不管这个，光看操作系统有什么用？我的游戏能玩吗？我的软件能用吗？结果大部分都不能用。光有操作系统，没有可用的软件，老百姓还是不可能认可的。

但是在用户的选择下，精简指令集遭遇了巨大的打击。但是IBM公司当然不肯善罢甘休，让一家巨头痛痛快快的认输基本是不可能的，更别说有钱、有面子、还有尊严的巨头。IBM公司出师不利之后，给出的答案是：咱们接着干！他拉拢了摩托罗拉、苹果以及微软这三家公司，加上自己组成了精简指令集的“四人帮”。微软当时是拉拢的主要对象之一，只要忽悠住了微软，温特尔联盟也就瓦解了，一箭双雕的事情也实在太爽了。微软也决定将Windows NT系统移植到精简指令集的CPU上，结果本打算这款操作系统能够在一九九一年发布，结果跳票到了一九九五年才发布，跳票了整整四年多，而且bug居多，根本没法用。

所以就像前面所说的，当比尔·盖茨听说苹果只用了一年就完成了CPU的迁移，一贯刀子嘴的盖茨竟然对苹果也说出了赞扬的话：“总体来说，苹果干的非常的好，因为当年微软也干过换新的事，可是给干砸了。谁也没有想到苹果只用了一年时间，干脆利索的就把这事儿给办成了。”

上文说到精简指令集那么好，为啥苹果还要换CPU呢？主要还是因为Power PC芯片的价格太高了。刚开始的时候，Power PC还是有很多优势的。但是英特尔这种有钱的大公司，连我们都能看出精简指令集有一定的优势，他们自然也心知肚明，只是嘴上不说罢了。英特尔后来砸钱做研究，发现了一个好的方法，将复杂指令在CPU内部改成精简指令，这就是奔腾Pro的做法。独一条x86的复杂指令，马上分解成精简指令风格。因此，有了技术突破的英特尔，在技术上一点也不比精简指令集落后。又加上英特尔在制造技术上甩了摩托罗拉几条街，Power PC不但在指令器上的优势没有了，反而散热不行的劣势更加的显露无遗。因此，在使用Power PC芯片的后期，苹果电脑的散热一直是个大问题。

另一个阵营的英特尔还可以大规模的量产CPU，成本比Power PC的CPU便宜了一大截。乔布斯也终于忍不住了，打电话给摩托罗拉的CEO克里斯·加尔文争吵，具体吵了什么我们都不知道，不过可以从后来两人的表现看出一些端倪。乔布斯后来称摩托罗拉的CEO克里斯是笨蛋，克里斯称乔布斯为“浑球”。我想，当时的谈话一定不是在友好的气氛中进行的。公开撕逼以后，摩托罗拉随即停止生产Star Max电脑，苹果公司也开始抛弃Power PC的架构。

经过一年紧张的工作，在2006年的Macworld上，乔布斯站在舞台上骄傲地宣称：Mac OS X的代码有8600万行，已经迁移完毕。买了新版的Xcode，原先的软件只需要重新编译一次，就可以在Mac上运行。另外，更换了CPU以后的Mac，还可以使用苹果自己开发的Boot Camp软件来安装Windows。Windows用户可以在苹果电脑上使用双系统。借助Windows，苹果电脑的销量增加了十倍。

苹果公司这场声势浩大的换新，真的像非洲大草原上迁徙的角马，稍有不慎就会成为狮子或者是鳄鱼的午餐。毕竟，换新的成功率和复杂度太高了，微软曾经干了六年，以失败告终。但是，这次换新成功以后，救活了mac平台，挽救了苹果公司，随后才产生了iPhone的奇迹。这次的音频就在这里。

我其实还想说一下苹果公司换新的技术细节，尤其是软件方面的技术细节。比如，苹果为了能让软件同时运行在两个平台上，使用了一种叫做通用二进制程序的技术。在同一个软件中提供两种架构的二进制文件，这样软件可以同时运行在Power、PC和x86平台上。包括在WWDC上，苹果公司的CEO曾经亲自演示Xcode 2.1的编译器如何编译两种代码等等。

但是，这个公众号我心里还是希望能有多几个关注者，满足我的一点虚荣心。如果我开始讲Rosetta模拟器，如何将用户程序翻译成英特尔x86的指令，比如说为了让Photoshop能运行在换新以后的mac上，就是使用的这种技术，就是一个叫Rosetta模拟器的东西。而且，使用这种技术以后，虽然性能是慢了一些，但是大部分的用户其实是没有什么感觉的。这个到底的原因是什么？
