---
title: "第20期  指令集之争，分久必合"
editor: visual
---

首先，讲一下这期的内容。非常抱歉，这期的内容是我昨天那篇文章《苹果换新：一次成功的大迁徙》中，被删掉的部分。昨天那篇文章太长了，这个公众号里的文章都是我感兴趣的，所以有的时候写着写着就写多了。因为这个公众号是我自己个人搞的，现在还挺有写作的冲动，但是呢，应该没有啥写作的才能。因为最多的一篇文章只有67次阅读。

我录音的方式也很简单，就是用个手机录音，录完以后再加个背景音乐就发出来。结果呢，昨天录的太多了，因为稿子写着写着就写多了，我就唠唠叨叨地录了45分钟。等我要发布的时候，微信的后台提示说，我发语音的话不能超过30分钟，然后我就开始删这个稿子，一直删到了16分钟。因为删除部分最多的就是指令集，这里我个人觉得还是挺可惜的，因此我今天单独拿出来再说一说指令集。这个非常的小众，估计只有我这种到了35岁了，还是很喜欢写软件的人才感兴趣了。我这里面讲的很多技术都是来自John和David的那本著名的书——如果学计算机的话，也许有人知道那本书，就是叫《计算机体系结构：量化研究方法》。我们一般简称为“量化”，这本书非常好。如果听众中有年轻人的话，又喜欢对各种CPU非常感兴趣，对技术感兴趣，还可以推荐买回来，好好读一下。

但我本人呢，并没有实际研发CPU的经验。虽然我很想我能够研发CPU，所以我对CPU的理解仅仅限于书本上的知识。现在英特尔、AMD或者是国内那些龙芯啊，那些人我都是非常敬佩的。很可惜我可能真是没有机会接触CPU研发了，毕竟我这个岁数，而且也一直搞软件。

现在就开始讲CPU的指令集。现在能在CPU领域呼风唤雨的公司，自然是英特尔。如果时光倒流到八十年代，英特尔远远没有现在这么风光。当时横亘在英特尔面前的是大名鼎鼎的摩托罗拉公司。当时英特尔公司出8086CPU的时候，同期呢，摩托罗拉推出了一款CPU叫68000。当时这个68000的性能是英特尔8086的五倍。因此，英特尔就奋发图强，于一九八二年又推出了80286的CPU，试图挽回颜面。结果呢，摩托罗拉那个时候推出了68010那款CPU，结果在性能上又把英特尔打得满地找牙。在接下来的几年中呢，摩托罗拉始终在技术上压制着英特尔，一直到80386的时候，摩托罗拉在技术上还是有很多的优势。

在这里我多讲一个关于英特尔的八卦，就是英特尔出的第一代CPU叫8086。按照编号的话，第二代CPU应该叫80186。但是英特尔并没有这么做，它第二代CPU直接叫80286，80186这个编号留给了一个根本不重要的芯片，可能是内存芯片还是显存芯片，我忘记了。它这样就是在命名上，搞得让人家认为好像比摩托罗拉的还要好一些。

还有就是甲骨文公司，他们当时的甲骨文的数据库非常的糟糕，经常出bug。但是他们出版本的时候，第一个版本就叫2.0版本，1.0连用都没用。所以说呢，在这个科技界还是得玩点心机的。所以，心机表也是有很多。科技界刚开始的时候，这个人还都是比较实在。比如说还有个事情，就是火狐跟IE竞争那个时候，都是从1.0、1.1、1.2这样小小的升级，等到发重大版本的时候才会跳一个版本。比如说你从1.0跳到2.0，就说明或者从2.0跳到3.0，只有发生了重大的变化，才会出一个整数号的版本号出来。

以前火狐发整数版本号的时候，比如说3.0到4.0，4.0到5.0，这种时候IE的项目组呢都会给他一个大的蛋糕庆祝。后来火狐升级得也就越来越频繁了，你这个经常升级大版本，然后IE的项目组呢就送的蛋糕越来越小，最后就是一个小茶杯蛋糕，一口能吃下去的那种。再后来呢，谷歌就加入了这个浏览器战争，退出了Chrome。然后它这个后来者一点也不按常理出牌，它这个版本号就随便升，结果几年时间，现在Chrome的版本号已经到了五十几点几，还是五十一点几。但火狐后来也这样，火狐肯定一看，我也去，也开始学这个Chrome。现在火狐和Chrome的版本号也是50左右了，以前都是好几年才会升一个大版本。

等火狐升级这么频繁以后，这个IE项目组就宣称以后不送蛋糕了，再送不起了。但是呢，我们可以从心理学上说，你这个版本号越大呢，大家就会觉得你这个功能越强大。现在火狐和Chrome版本号之争，好像Chrome暂时是领先的，应该差不多。但也不能排除火狐下一个版本直接从100开始。所以有的时候你不能光玩技术，也得玩玩这种心机。你看人家甲骨文，第一个版本一出来就是2.0，这个有时候也很重要。

再来说英特尔和这个摩托罗拉。后来呢，IBM就是帮了英特尔和微软。摩托罗拉主要的客户当时就只剩下了苹果公司，上一期那个公众号的故事也讲了，就是最后苹果和摩托罗拉也分手了，摩托罗拉也就后来彻底退出了CPU的市场。

这个摩托罗拉衰落的故事，我还是有故事可以讲的。嗯，以后看看有机会的话，咱们再讲一讲。摩托罗拉最后也被收购了。其实你可以用一句话概括，就是“富不过三代”。摩托罗拉这个家族企业，第一代创始人非常厉害，然后越来越不行。这个CEO都是有血缘关系的，这个基因呢，遗传也没遗传好。他们的CEO一个比一个...（此处原文有省略，可能是“差劲”，但为保持原文风格，不做具体填充）。后来呢，当然这是我后来衰落以后的马后炮，不过他们的CEO确实一个比一个弱。但是我还是今天的观点，一贯的观点就是说，成功有时候很偶然。如果当时当年IBM把这个CPU订单给了摩托罗拉，也许现在摩托罗拉就是今天的英特尔，这个都不好说。有时候这个成功的因素很意外，但现在摩托罗拉主要是失败了。但是我还是想，不能把它黑的太厉害，是吧？

接下来再讲一点点经典指令集和复杂指令集。稍微的，这里有可能要重复上一期的内容，稍微的重复一点，因为这样的故事就能连贯一些。

当前的CPU主要分为两种阵营吧，一种是复杂指令集，一种是经典指令集。当我们在写一个计算机程序的时候，最终要变成CPU可以识别的指令，CPU才能运行。要从很高级的代码，然后转换成CPU可以识别的。讲到这里，我突然想起来了，我刚刚在B站上上传了一个编程视频，B站上的地址也是在“软件那些事”，搜一搜应该能搜到。就是讲Python的代码，如何变成低级指令。就是你这样写一个Python的代码，然后它怎么变成了更低级的指令，然后在Python的虚拟机里执行。我就是用Python自己带的一个库文件来演示。有一点点是讲编译原理的意思，就是我这个语法怎么通过解析器，然后生成一个语法树。我以为这个视频本来至少能够有10个人观看吧，结果到现在我去查了一下，是三次。看来真的没人喜欢研究这么底层的东西。

每个处理器支持的指令集是不同的。英特尔在设计的时候呢，肯定是尽可能的支持多种不同的指令，杂七杂八的都支持。因为有的它是很复杂的指令，但是这么做会有缺点。第一个缺点呢，就是制造起来比较困难，各种逻辑电路都很复杂。因为你本身就是用的复杂指令集，它这个逻辑电路就很复杂。但是英特尔的制造工艺肯定在CPU界是最先进的，这个缺点英特尔解决的还可以。但是像这么高的集成度会造成非常大的功耗。这一点，它其实最终就属于一个物理原理，英特尔也束手无策。所以在手机时代，它这个高功耗就显现出来，它的这个芯片也不怎么好使。

第二呢，是因为复杂指令集的指令相当的多，然后因此每个指令有的时候长短执行的长短时间还不同。比如说有的指令长度是有的指令长度的几倍，结果呢，会导致一些不必要的等待。正是因为这些缺点呢，当时就有了精简指令集的解决方法。精简指令集当时主要的解决思路就是说呢，只保留很少的精简指令，复杂的指令就用精简指令来组成。第二点呢，就是我所有的指令长度都是相同的，每次执行的时间都相同，所以你不用等。但很可惜，就在这个地方提出精简指令集的时候，英特尔早就使用复杂指令集开始造CPU了。就是理论好是好，但是时间呢，就不太凑巧。因此英特尔当时也只能硬着头皮继续坚守复杂指令集。

呃，只要不是技术控，就觉得那种技术好就能决定一切的人啊，肯定会做出和当时英特尔一样的决定。首先呢，当时英特尔在市场上已经取得了非常大的优势。因为他抓了IBM这个大金主嘛，当时个人的电脑大批都是用它的。而且这个优势呢，主要是基于他的复杂指令集取得的。而且现在种种情况，你放弃这个复杂指令集，就相当于一下子就是一穷二白了，一夜回到解放前。当时你就无异于自杀嘛。

其次呢，做精简指令集的厂商当时多如牛毛，做复杂指令集呢，当时只有英特尔，当时AMD还没有。虽说呢，英特尔坚守复杂指令集，看起来在这个相当于在科学发展道路上有点是逆行，有点不遵守科学发展观的意思。到时候，先把复杂指令集玩不动了再说。后来坚守着复杂指令集，然后一边研发精简指令集就是了，相当于两手都摸着石头过河。

后来英特尔确实也推出过经典指令集的CPU，那款CPU的名字叫80860。当时呢，市场反应很差，根本没人买。英特尔当时就很放心了，经典指令集不行嘛，这个市场反应，所以一颗石头也就落了地，后来也就不怎么研发了。

当年，英特尔自己一个人坚守这个复杂指令集，而当时就是弄这个经典指令集的，至少有五大金刚。当时就造CPU的五大金刚：第一是太阳公司，第二是SGI公司，第三是IBM公司，还有DEC公司和惠普公司。这些公司，当时哪一个都不比英特尔弱，而且很多像IBM啊，像惠普都比它强很多。如果单纯跟兵力对比的话，简直就相当于一只小猪战群狼，哪一个公司都能有机会把英特尔弄得死死的。

但是后来，我们也就都知道了，这五家公司都被英特尔分别打得满地找牙。为什么呢？就当时是各自为战，但实这件事情也就是他们也不团结。其实，国内国外啊，在这种事情上也是一个德行。这种事情你也很难团结起来，万众一心这种事情都是赢了以后才能扯的虎皮。

比如说，我们来举一个中国目前这个手机市场的例子。大家的宣传的时候，是宣传什么？最终的目标就是，你看看乐视啊，还包括其他的手机公司，都是说要把苹果公司干掉嘛，就是要弄掉苹果公司。因为苹果公司就是一家，只有他自己造苹果手机，并且坚守这个iOS市场。你造安卓的有多少？我估计国内算一算，知名的、不知名的加起来说不定有100家。但我不知道这个数字，但是有很多家，我们随口可以说很多家。

你说这很多家，比如说我们就举一个例子，100家好了。你说这100家会齐心协力干苹果吗？肯定是不会的。他们这100家首先要互相打，先要打出一个草头王来。肯定是到最后，你现在肯定不会去和苹果去正面交锋，先要安卓之间互相干嘛，互相打完之后，哎，找出几个大的来才有机会跟苹果正面交锋。

所以这些公司互相打的时候，搞出一个最后几个优胜者，再跟苹果去决斗。不过这很有可能的结局就是，这100家安卓厂商呢，最后自己在打的时候互相就不行了，自己就先挂了。

如果大家喜欢看历史的话，也应该有很多这种事情。比如说，你这个明朝为什么败给清朝啊？根本就不是我们现在想象中，如果不看历史的话，就不知道。就根本不是兵力不行。那时候，明朝皇上上吊自杀的时候，明朝的兵还多着呢，他只打了北京。那时候明朝是两个（都城），南京那边还多的是那个明朝的兵，非常多。如果好好打的话，根本清朝没什么机会能打回去。

但是明朝有个问题，因为皇上死了嘛，正牌的皇上已经死了，上吊了，就只能先再选出一个来呗。结果呢，这个选就出现问题了。你选这个A，那一群人不愿意；你选那个，我又不愿意。然后自己先打起来，等到互相之间打的差不多了，你这个草头王也打虚弱了，然后清朝的部队也就过来。其实历史呢，都是这样不停的重复。

哎，当然了，我坐在这里是属于事后诸葛亮，放马后炮来指点江山。但这种事情很爽。最后再来谈一个问题，现在有很多人就问你这样一个问题了：哎，当前这个x86架构是不是落后了？就是说，英特尔这个x86架构是不是落后了？

其实这个问题呢，问的并不好。为什么呢？因为x86架构，首先他从来没有落后过。这个问题，应该这样问：x86架构到底还能领先多久？就是说你问他能领先多久，而不能说他落后了。类似的，就像是我们不能，如果大家懂足球的话，我们就不能问这个问题：说德国足球落后了吗？人家德国足球队一直没落后，就一直在领先。所以你应该问：哎，德国足球可以领先多久？

关于这个问题啊，我还是推荐我在最上面推荐的那本书，叫《计算机体系结构量化研究方法》，就简称量化。如果在计算机系啊，或者是微电子系，你简称量化，估计就是指这本书啊，特指这本书。这本书有很多内容，如果感兴趣的话，就读起来还是挺有趣的。

就无论是这个x86啊，还是ARM，还是MIPS啊，种种不同的架构啊，最底层的实现其实跟这些架构是没有什么关系的。你很难说有一个是在x86上或者是ARM上独占的技术，而在其他的架构上反而不能用。

打个比方来说，现在基础的理论研究，比如说分支预测器技术，这是一种很重要的技术，很基础的技术。就预测分支预测器技术，这种技术类似于什么？类似于公路。你这种最基础的东西呢，就相当于修了高速公路。你这种最基础的越厉害，但那种架构相当于什么？那种架构，比如说ARM架构还是x86，这种架构类似于跑车。你公路好了，高速公路好了，两辆车跑的都快。尤其是比如说我说的这个GC啊，分支预测技术，两家都可以使用。并不是说你ARM能用，x86不能用；或者是x86能用，ARM不能用。没有，这都是基础科学，两家都可以用。这就是科学家研究的基础的基础科学，谁都可以用。

所以呢，现在这两种指令集之争，经典指令集和这个复杂指令集的争论已经逐渐平息了。现在应该不怎么争了。为啥平息了？因为在技术先进了，最底层就是微结构啊和实现已经统一了这两种架构。这两种架构已经水乳交融了，再争这个就显得比较落伍。现在可能有宣传的，还有但是没必要争来争去，最后统一了。就是我们中国说的那句话，就是分久必合，合久必分嘛。

还有就是微结构方面也是最基础的，造CPU用了其实也那么多年了，也没有什么潜力好挖了。毕竟有一种叫乱序执行的CPU，看看这本书的话就知道了，什么叫乱序执行的CPU。这个理论包括造出来可能得有六七十年或者七八十年，已经很难再有很大的突破。

现在的工程师啊，这种微电子的工程师就是一点一点的啃这个东西，一点一点的啃这个性能。所以就想提高就非常困难了。

那你说以后的CPU性能应该从哪里突破了？因为这就有关于预测了。关于预测，我是不太敢的。首先这个技术水平不行，其实你预测就有，可能就马上就打脸。但是我还是试试看吧。我觉得啊，以后这个CPU如果性能上有大突破的话，应该是在并行运算的领域。
