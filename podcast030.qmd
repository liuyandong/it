---
title: "两个人加六个月做出了一个Unix操作系统"
editor: visual
---

从multics项目退出以后，肯·汤姆逊和丹尼斯·里奇试图在贝尔实验室内部重启分时操作系统的想法，被管理层否决了。

汤姆逊在multics项目组的时候，开发了一个叫做“太空旅行”的电脑游戏。这款游戏大受欢迎，为了玩这款游戏，贝尔实验室不得不每小时付出几百美金的代价，因为当时计算机的时间太贵了，而这些出色的研究人员又如此沉迷于这个游戏。在否决了里奇和汤姆逊购买一台新机器的申请以后，他们两个找到了一台已经淘汰的PDP-7电脑。这款电脑在各方面已经落后了，但是它的显示器还是比较优秀的，用来玩游戏刚刚好。于是，他们又重写了“太空旅行”这款游戏的代码，把这台PDP-7当成了一台专门玩游戏的机器，这也算是一个两全其美的方法。一方面，贝尔实验室终于不用担心研究人员用昂贵的GE-635大型机来玩游戏了；另一方面，里奇和汤姆逊也可以借此机会和其他人员深入地讨论。

很长的一段时间里，这台梦想中的分时操作系统的文件系统都只出现在贝尔实验室的黑板上，被里奇称之为“粉笔文件系统”。这个操作系统长期以来都只能在纸上和黑板上运行。在里奇和汤姆逊的脑子里面，他们讨论的结果就是，要把这个操作系统简单地分成四部分，分别是操作系统核心、外壳、编辑器以及汇编程序。做项目总要事出有名，国内外都是如此。于是，这哥俩开始以创建下一代文本编辑器为课题，申请了一个项目。

当时贝尔实验室非常开放，科研人员可以随意地发挥，里奇和汤姆逊也不算撒谎，因为他们申请的这个文本编辑器项目，需要先有一个操作系统。恰好在一九六九年的夏天，汤姆逊的妻子邦尼要带他们年幼的孩子回老家，一个月之后才会回来。在离开的这一个月里，汤姆逊给自己计划每周解决一个问题。四周过去了，他和里奇规划的操作系统被实现了出来，四部分四星期分别是：操作系统核心、外壳、编辑器和汇编程序。这个简陋的操作系统就是分时共享操作系统的简化版。

事后，他们接受采访时说，很多人误以为UNIX是multax的对立面，其实这两个操作系统之间有深厚的文化渊源。由于这台操作系统是在简陋的PDP-7上实现的，而PDP-7硬件的性能当时已经非常的落后，因此UNIX第一就是要保持非常的紧凑、非常的简单，任何多余的功能都会让这台PDP-7电脑无法正常运转。

汤姆逊多年以后回忆说，UNIX不是最终目标，只是一个副产品，是为了我们做其他的项目而制造出来的副产品。多年以后，我们再来看这句话，也许UNIX当初真是为了运行一个文本编辑器而造出来的操作系统。UNIX没有任何的商业计划，它也不为了满足客户的需求，所做的一切都是里奇和汤姆逊的个人爱好。有好的想法就加进去试试，任何的大修大改都不需要提出申请，也不需要看客户的脸色，也没有行政的压力、市场的压力。甚至在没有任何目标的情况下，UNIX这棵小树苗飞速地进化着。

当时UNIX还非常的简陋，只能运行在PDP-7上，甚至当时它没有自己的名字。和丹尼斯·里奇、肯·汤姆逊一同参加multax项目的，还有一个叫做布莱恩·科尼汉的人，他创造了“UNIX”这个词。一方面，他是用来戏虐multax；另一方面，他是用来戏虐当时这个只能一个人使用的操作系统——UNIX（multax是很多的意思，UNIX则只是一个的意思）。谁又能想到，日后这个叫做UNIX、原意指示为一个人使用的操作系统，将几乎被每个人使用？

在一九七二年，UNIX迎来了一个全新的概念，这个概念让UNIX大放异彩。汤姆逊和里奇为了这个概念，花费了3个晚上，对UNIX进行了自出生以来最大的一次修补。这个概念就是如今在UNIX已经习以为常的“管道”的概念。汤姆逊后来回忆这件事情的时候说：“那是我一生最棒的3个晚上。”

管道的概念并非是汤姆逊和里奇的突发奇想，而是由当时贝尔实验室的管理者道格·麦克罗伊首先提出的。他提出，数据应该像流水一样，在不同的软件中流动。作为汤姆逊的老板，道格·麦克罗伊不停地给汤姆逊讲他的思路，但是汤姆逊一直不以为然。后来他说：“我觉得他的想法不切实际，我从一开始就认为他是错的。”作为老板的好处之一，就是可以不断地催促他的下属实现他的想法。作为下属的汤姆逊，也没有办法，在老板的不停催促下，汤姆逊简化了老板提出的模型——一个程序的输出就是另一个程序的输入，这就是管道的概念。汤姆逊原来反对老板的思路，后来又支持了老板的思路。对此，汤姆逊的解释是：“一夜之间也不知道怎么回事，我就想到了一个好办法。”他的老板得知汤姆逊已经将他的思想加入了UNIX之中，而且仅用了3个晚上就把这个功能给实现了，高度评价了汤姆逊。他说汤姆逊有洞悉项目全局的神奇能力，如果换成其他的程序员，至少得分几周的时间来实现这个功能。

接下来我开始讲讲我的感想。

关于UNIX引入管道的感想：当UNIX引入管道以后，UNIX系统一下子就蜕变成了一个工具箱。要使用管道，你可以借助其他的程序与你的程序相交互，这是一个全新的软件哲学。Windows用户则遵从另一个软件哲学，Windows软件都是将所有相关的功能都集合在一起。比如说微软的Office软件，就很难和其他的软件交互。Office提供的功能就这么多，比如说它提供了100个功能，你再用得再厉害，也只能用到这100个功能。可能普通人只用到两成、两三层的功能，比如说只有二三十个功能。但是UNIX这里是另一个哲学，UNIX的软件呢，每个软件都做好一个功能，但是这些软件通过管道相组合，就会形成千百种你从来没有想到过的使用方法。UNIX操作系统本身也就成了一个工具箱，里面有各种各样的小工具，将这些小工具组合起来，就形成了一个强大的瑞士军刀。

但是，为什么我们普通的用户，尤其是第一次用到UNIX，也就是现在的Linux的时候，就会觉得非常的难用，这到底是为什么呢？我思考过很多，我尝试解释一下，大家看看我说的有没有道理。

我想很多人应该学过Photoshop或者AutoCAD或者Maya这种软件。后两者也可以做3D，也可以画那种建筑图，是不是非常的难？我觉得大部分人都会觉得非常的难。首先，菜单非常的多，你一打开好长的一串菜单；其次，你不知道这个菜单有什么用。对着书呢，你就是拿一本非常厚的书，可能有一公斤那么重的书，你也只能学个皮毛。你说为什么呢？因为学Photoshop、AutoCAD、Maya软件，实际上你并不是在学这个软件的本身，而是在学习软件背后的领域知识。比如说你是在学习Photoshop，实际上你是在学习你对照片的审美。如果你本身就对美的感觉不怎么样，处理出来的图片肯定也不怎么好看，技术再好也不好看。再比如说建筑行业，如果你要用AutoCAD来画图，如果用户本身也不是学建筑的，也不会AutoCAD，那你就是精通AutoCAD也没什么用。因为你对建筑本身行业就不了解，你能建出好模型来吗？比如说如果是一个用AutoCAD的高手，你如果给他一张纸、一支笔、一把尺子，他也能画出一个好模型来。其实AutoCAD只是一种工具而已。所以，如果我们碰到一位年龄比较大的人，他可能连电脑都不会用，如果他本身是一个优秀的建筑师，学起AutoCAD来肯定是要比一个程序员都要快得多。因为如果你要操作AutoCAD的话，更重要的是考察了你背后的领域知识，比如说就是考察了你对建筑行业的了解的知识。

我们说普通用户打开电脑一看Linux为什么觉得很难用呢？其实就是一样的道理。普通用户本来用不上什么Linux或者UNIX，因为普通的用户也用不上Photoshop，也用不上AutoCAD。因为普通用户上网就是想上个网、聊个天，或者看个新闻。UNIX解决的目标是什么？它解决的目标都是非常宏大的目标，比如说整个谷歌公司背后的数据库，或者整个银行系统的结账系统，或者豆瓣网，那么多用户把所有的帖子存起来，这种问题当然都不简单。UNIX弄了那么多种工具就是为了解决这种非常复杂的问题，非常复杂的问题就要非常复杂的软件来解决。你如果说我们普通用户看个电影、玩个游戏，其实就相当于如果这时候你还是用UNIX的话，就相当于是用错了工具。就很像我们Windows里都自带了一个画图板，非常的简单，你拿起鼠标就可以画，而且非常容易使用，你甚至都不用看任何的书，因为它只有几个按钮。但是为什么专业一点的公司都会再去买一套Photoshop来使用呢？又难学又不简单，难道这是自找苦吃吗？当然不是了，这就叫术业有专攻。我们觉得非常难，可能我们解决的问题本身不对，或者我们背后的领域知识不足够，或者说这个工具设计出来压根就不是给我们用的。

我最近在哔哩哔哩网站上——我一说B站，结果很多人不知道B站是哪个站，我觉得还是不够聪明——录了一些编程的视频。刚开始的时候呢，我是想教iOS编程，后来经过反馈呢，说这个iOS太难了。其实我讲的那些iOS的知识都是最简单的，也没有办法，因为很多人也没有苹果电脑，我就又挖了一个坑，开始教Python编程。这个编程难不难呢？其实和UNIX难不难是一个道理，就要看你解决的问题是什么。如果你想解决的问题就是用Python打印出一句话来，比如说你要把“hello world”给打印出来，那都不难，任何编程语言都不难。但是如果你要解决的是几十万人信息同步的问题，这个不止拍下来，任何的编程语言都是一个大难题。因此，其实这是一个背后的故事，就是看你要解决什么问题。

好，我的感想差不多说到这里就完了，这一期的时间也应该差不多了。到目前为止，UNIX仍然是用汇编语言写的。我说“到目前为止”是我这个故事的目前，不是到现在，等下一期的时候将会介绍C语言。有了C语言这个影响千千万万人的编程语言——目前它一直排名第一——就要出生了。C语言是值得用很多篇幅来大书特书的。下一期我们将讲C语言的故事，用C语言把UNIX重写的故事。
